# 导入 matplotlib 库，它是一个用于数据可视化的强大库，可创建各种静态、动态、交互式的图表
import matplotlib
# 指定使用 TkAgg 作为 matplotlib 的后端，TkAgg 基于 Tkinter 库，用于在 Tkinter 窗口中显示图形
# 不同的后端适用于不同的环境和需求，TkAgg 是一个常用的后端，适合在桌面应用中显示图表
matplotlib.use('TkAgg')
# 从 matplotlib 库中导入 pyplot 模块，pyplot 提供了类似于 MATLAB 的绘图接口，方便进行绘图操作
# 它包含了一系列用于创建和定制图表的函数
import matplotlib.pyplot as plt
# 导入 numpy 库，它是 Python 中用于科学计算的基础库，提供了高性能的多维数组对象和处理这些数组的工具
# 在本代码中虽然没有直接使用 numpy 的高级功能，但它是科学计算领域常用的库，为后续可能的扩展提供了便利
import numpy as np

# 定义一个函数，用于为柱状图添加标注
def label(bars):
    # 遍历柱状图中的每一个柱子
    for bar in bars:
        # 获取柱子的高度，这个高度对应着养老金的金额
        height = bar.get_height()
        # 在柱子上方添加标注文本
        # bar.get_x() + bar.get_width() / 2. - 0.2 是标注文本的 x 坐标，位于柱子的中心稍微偏左一点
        # 这样设置是为了让标注文本在柱子上方居中显示，并且稍微向左偏移一点，避免与柱子边缘重叠
        # 1.03 * height 是标注文本的 y 坐标，位于柱子上方一定距离处，1.03 表示在柱子高度的 103% 位置
        # '%s' % int(height) 是标注文本的内容，将柱子的高度转换为整数并以字符串形式显示
        plt.text(bar.get_x() + bar.get_width() / 2. - 0.2, 1.03 * height, '%s' % int(height))

# 设置 matplotlib 显示中文
# 使用黑体字体来显示中文，因为默认字体可能无法正确显示中文
plt.rcParams['font.sans-serif'] = ['SimHei']
# 设置 matplotlib 正常显示负号
# 有些字体在显示负号时可能会出现问题，通过这个设置可以确保负号正常显示
plt.rcParams['axes.unicode_minus'] = False

# 生成一个新的绘图窗口（画布）
# 后续的图表绘制操作都将在这个窗口中进行
plt.figure()

# 定义柱状图的横坐标标签，代表不同的缴费年份
# 这些标签将显示在柱状图的 x 轴上，方便用户识别不同的缴费年限
name_list = ['15年', '20年', '30年', '35年', '40年', '45年', '50年']

# 养老金的钱分两部分：基础养老金、个人账户养老金
# 基础养老金（当地）：上年度在岗职工月平均工资和本人指数化月平均缴费工资的平均值为基数，缴费每满 1 年发给 1%
# 个人账户养老金 = 个人账户储存额 / 计发月数。65 退休为 101 个月

# 用于存储预测领取的养老金金额
myMoney_list = []
# 不同的缴费年限
years = [15, 20,  30, 35, 40, 45, 50]
# 初始月平均缴费工资
pay = 4500
# 当地上年度在岗职工月平均工资
local_pay = 6000
# 经济增长率和工资增长率
GDP_rate = 0.07
# 未来个人养老金账户余额利息（银行利率）
Bank_rate = 0.03

# 遍历不同的缴费年限
for i in years:
    # 计算个人养老金
    # pay * (1 + GDP_rate + Bank_rate) 是考虑了工资增长和账户利息后的缴费工资
    # i * 0.08 * 12 是个人缴费的总金额（假设个人缴费比例为 8%，一年 12 个月）
    # / 101 是将个人账户储存额除以计发月数（65 岁退休为 101 个月）
    person = (pay * (1 + GDP_rate + Bank_rate)) * i * 0.08 * 12 / 101
    # 计算基础养老金（当地）
    # (local_pay + pay) / 2 是上年度在岗职工月平均工资和本人指数化月平均缴费工资的平均值
    # i * 0.01 是缴费每满 1 年发给 1%
    basis = ((local_pay + pay) / 2) * i * 0.01
    # 将个人养老金和基础养老金相加，得到总的养老金金额，并添加到列表中
    myMoney_list.append(person + basis)

# 打印预测的养老金金额列表
# 方便用户查看不同缴费年限对应的养老金预测值
print(myMoney_list)

# 将预测的养老金金额列表赋值给变量 y
# 在后续绘制柱状图时，y 表示柱子的高度
y = myMoney_list
# 生成与缴费年份数量相同的整数序列，作为柱状图的横坐标位置
# 这些整数用于确定柱子在 x 轴上的位置
x = range(len(y))
# 打印横坐标位置序列
# 方便用户查看柱子的横坐标位置信息
print(x)

# 绘制柱状图
# x 是柱状图的横坐标位置
# y 是柱状图的高度（即养老金金额）
# color='CornflowerBlue' 设置柱子的颜色为矢车菊蓝色，使图表更加美观
# tick_label=name_list 设置柱子对应的标签为缴费年份，让用户能够清楚地知道每个柱子代表的缴费年限
# 调用 label 函数为柱状图添加标注，显示每个柱子对应的养老金金额
label(plt.bar(x, y, color='CornflowerBlue', tick_label=name_list))

# 用于存储养老金的增长率
list1 = []
# 计算养老金的增长率
# 遍历养老金金额列表，除了最后一个元素
# 因为计算增长率需要相邻两个值，最后一个元素没有后续值与之比较
for i in range(len(y) - 1):
    # 计算相邻两年养老金的增长率
    # (y[i + 1] - y[i]) / y[i] 是增长率的计算公式
    list1.append((y[i + 1] - y[i]) / y[i])

# 打印养老金的增长率列表
# 方便用户查看不同缴费年限之间养老金的增长情况
print(list1)

# 设置图表的标题为 '养老金分析'
# 让用户清楚地知道这个图表的主题
plt.title('养老金分析')
# 显示绘制好的图表
# 打开一个窗口，展示绘制好的柱状图
plt.show()